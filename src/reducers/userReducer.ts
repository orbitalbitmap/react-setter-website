import axios from 'axios'
import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, } from '../store';

export interface CounterState {
  id: any;
  firstName: any;
  lastName: any;
  placardName: any;
  email: any;
  phoneNumber: any;
  roleId: any;
  deletedAt: any;
  role: any;
  gyms: any;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: CounterState = {
  id: "",
  firstName: "",
  lastName: "",
  placardName: "",
  email: "",
  phoneNumber: "",
  roleId: 999,
  deletedAt: null,
  role: {},
  gyms: [],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchUserAsync = createAsyncThunk(
  'user/fetchUser',
  async (id: number) => {
    const {data} = await axios.get(`http://localhost:1337/api/employees/${id}`);
    // The value we return becomes the `fulfilled` action payload
    return data;
  }
);

export const userSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setUser: (state, action: PayloadAction<any>) => {
      state.id = action.payload.id;
      state.firstName = action.payload.firstName;
      state.lastName = action.payload.lastName;
      state.placardName = action.payload.placardName;
      state.email = action.payload.email;
      state.phoneNumber = action.payload.phoneNumber;
      state.roleId = action.payload.roleId;
      state.deletedAt = action.payload.deletedAt;
      state.role = action.payload.role;
      state.gyms = action.payload.gyms;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchUserAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchUserAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.id = action.payload.id;
        state.firstName = action.payload.firstName;
        state.lastName = action.payload.lastName;
        state.placardName = action.payload.placardName;
        state.email = action.payload.email;
        state.phoneNumber = action.payload.phoneNumber;
        state.roleId = action.payload.roleId;
        state.deletedAt = action.payload.deletedAt;
        state.role = action.payload.role;
        state.gyms = action.payload.gyms;
      })
      .addCase(fetchUserAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

// export const { fetchUserAsync } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export default userSlice.reducer;